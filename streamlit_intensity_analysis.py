# -*- coding: utf-8 -*-
"""Streamlit_Intensity_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qYG9CMLXu7Obqg1h9kT5RoEhRr2IAOoI
"""

import joblib

# Loading the saved model which has good accuracy - Best tuned SVC after augmentation
best_tuned_augmented_svc = joblib.load("/content/drive/MyDrive/Upgrad_bootcamp/Final Capstone/Intensity_Analysis_Project/Models/Augmented_SVC_model.pkl")

best_tuned_augmented_svc

# Installing Streamlit
# !pip install streamlit --quiet

"""Creating app.py file"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import joblib
import re
import nltk
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer
# Initializing NLTK tools
lemmatizer = WordNetLemmatizer()
stop_words = nltk.corpus.stopwords.words('english')
# removing certain words in the stopwords, so that meaning of the sentence doesn't change
stop_words.remove('no')
stop_words.remove('not')
stop_words.remove('but')

# Load trained model and vectorizer
model = joblib.load("/content/drive/MyDrive/Upgrad_bootcamp/Final Capstone/Intensity_Analysis_Project/Models/Augmented_SVC_model.pkl")
tfidf_vectorizer = joblib.load("/content/drive/MyDrive/Upgrad_bootcamp/Final Capstone/Intensity_Analysis_Project/Models/tfidf_vectorizer.pkl")

# Function to clean text
def clean_content(text):
    # Convert to lowercase
    text = text.lower()
    # Remove special characters, punctuation, and numbers
    text = re.sub(r'[^a-z\s]', '', text)
    # Tokenize and remove stopwords
    words = text.split()
    words = [word for word in words if word not in stop_words]
    # Lemmatize each word
    words = [lemmatizer.lemmatize(word) for word in words]
    # Join back into a single string
    return ' '.join(words)

# Streamlit app
st.title("Intensity Analysis - An intelligent system using NLP")
st.write("This application predicts the emotional intensity in text as Angriness, Happiness, or Sadness.")
input_text = st.text_area("Enter the text to analyze intensity:", placeholder="Type a text snippet here...")

if st.button("Analyze Intensity"):
    # Preprocessing the input text
    cleaned_text = clean_content(input_text)

    # Transforming the text into numerical features
    transformed_text = tfidf_vectorizer.transform([cleaned_text])

    # Making predictions
    prediction = model.predict(transformed_text)[0]

    # Display the result
    if prediction == 0:
        st.subheader("Predicted Intensity: **Angriness**")
    elif prediction == 1:
        st.subheader("Predicted Intensity: **Happiness**")
    elif prediction == 2:
        st.subheader("Predicted Intensity: **Sadness**")
    else:
        st.subheader("Unknown Intensity")


